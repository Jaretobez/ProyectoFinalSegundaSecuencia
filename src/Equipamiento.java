
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author aeaya
 */
public class Equipamiento extends javax.swing.JFrame {
ConexionDB conSQL = new ConexionDB();
    /**
     * Creates new form Equipamiento
     */
    public Equipamiento() {
        initComponents();
        a = new Atributos();

        TablaMostrar();
         TablaBuscar();
         TablaEliminar();
         TablaModificar();
         
         configurarSeleccionDeFilaEliminar();
         configurarSeleccionDeFilaModificar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton11 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(51, 102, 0));
        jPanel1.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(51, 153, 0));
        jPanel2.setLayout(null);

        jLabel1.setText("ID");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(40, 100, 70, 30);

        jLabel2.setText("NOMBRE");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(40, 160, 100, 30);

        jLabel3.setText("Tipo");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(40, 220, 60, 30);
        jPanel2.add(jTextField1);
        jTextField1.setBounds(130, 100, 120, 40);
        jPanel2.add(jTextField2);
        jTextField2.setBounds(130, 160, 120, 40);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arma", "Gafas", "Chaleco", "Casco", "Proteccion Facial", "Guante", "Mochila" }));
        jPanel2.add(jComboBox1);
        jComboBox1.setBounds(132, 222, 120, 40);

        jButton6.setText("GUARDAR");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton6MousePressed(evt);
            }
        });
        jPanel2.add(jButton6);
        jButton6.setBounds(90, 320, 140, 40);

        jButton7.setText("Limpiar");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton7MousePressed(evt);
            }
        });
        jPanel2.add(jButton7);
        jButton7.setBounds(100, 460, 130, 40);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "TIPO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel2.add(jScrollPane1);
        jScrollPane1.setBounds(310, 80, 510, 320);

        jTabbedPane1.addTab("Nuevo Equipamiento", jPanel2);

        jPanel4.setBackground(new java.awt.Color(51, 153, 0));
        jPanel4.setLayout(null);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "TIPO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jPanel4.add(jScrollPane2);
        jScrollPane2.setBounds(40, 150, 452, 402);

        jLabel4.setText("DAME UN ID");
        jPanel4.add(jLabel4);
        jLabel4.setBounds(27, 36, 120, 50);
        jPanel4.add(jTextField3);
        jTextField3.setBounds(140, 40, 130, 40);

        jButton8.setText("buscar");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton8MousePressed(evt);
            }
        });
        jPanel4.add(jButton8);
        jButton8.setBounds(310, 40, 120, 40);

        jTabbedPane1.addTab("Buscar", jPanel4);

        jPanel6.setBackground(new java.awt.Color(51, 153, 0));
        jPanel6.setLayout(null);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "TIPO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jPanel6.add(jScrollPane3);
        jScrollPane3.setBounds(40, 150, 452, 402);

        jLabel5.setText("DAME UN ID");
        jPanel6.add(jLabel5);
        jLabel5.setBounds(27, 46, 100, 40);
        jPanel6.add(jTextField4);
        jTextField4.setBounds(140, 40, 130, 40);

        jButton9.setText("BUSCAR");
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton9MousePressed(evt);
            }
        });
        jPanel6.add(jButton9);
        jButton9.setBounds(310, 50, 100, 30);

        jTabbedPane1.addTab("Eliminar", jPanel6);

        jPanel5.setBackground(new java.awt.Color(51, 153, 0));
        jPanel5.setLayout(null);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "TIPO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable4);

        jPanel5.add(jScrollPane4);
        jScrollPane4.setBounds(60, 170, 452, 402);

        jLabel6.setText("DAME UN ID");
        jPanel5.add(jLabel6);
        jLabel6.setBounds(50, 70, 90, 40);
        jPanel5.add(jTextField5);
        jTextField5.setBounds(150, 70, 120, 40);

        jButton10.setText("BUSCAR");
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton10MousePressed(evt);
            }
        });
        jPanel5.add(jButton10);
        jButton10.setBounds(310, 70, 120, 40);

        jLabel7.setText("NOMBRE");
        jPanel5.add(jLabel7);
        jLabel7.setBounds(547, 140, 80, 40);

        jLabel8.setText("TIPO");
        jPanel5.add(jLabel8);
        jLabel8.setBounds(545, 226, 60, 30);
        jPanel5.add(jTextField6);
        jTextField6.setBounds(641, 140, 120, 40);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arma", "Gafas", "Chaleco", "Casco", "Proteccion Facial", "Guante", "Mochila" }));
        jPanel5.add(jComboBox2);
        jComboBox2.setBounds(640, 230, 120, 30);

        jButton11.setText("MODIFICAR");
        jButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton11MousePressed(evt);
            }
        });
        jPanel5.add(jButton11);
        jButton11.setBounds(590, 370, 150, 40);

        jTabbedPane1.addTab("Modificar", jPanel5);

        jPanel1.add(jTabbedPane1);
        jTabbedPane1.setBounds(170, 30, 830, 630);

        jButton1.setText("Usuarios");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(20, 170, 120, 40);

        jButton2.setText("Equipos");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton2MousePressed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(20, 240, 120, 40);

        jButton3.setText("Partida");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton3MousePressed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(20, 310, 120, 40);

        jButton4.setText("Equipamiento");
        jPanel1.add(jButton4);
        jButton4.setBounds(20, 380, 120, 40);

        jButton5.setText("Salir");
        jPanel1.add(jButton5);
        jButton5.setBounds(20, 560, 120, 40);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1010, 670);

        setSize(new java.awt.Dimension(1020, 672));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MousePressed
        // TODO add your handling code here:
        Equipos equipoframe  =new Equipos();
        equipoframe.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_jButton2MousePressed

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        // TODO add your handling code here:
         Usuarios usuframe = new Usuarios();
        usuframe.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton6MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MousePressed
        // TODO add your handling code here:
        boolean error = false;

        try {
            int nuevoIdEquipamiento = Integer.parseInt(jTextField1.getText().trim());

            // Verificar si el ID de usuario ya existe
            if (idEquipamientoExiste(nuevoIdEquipamiento)) {
                JOptionPane.showMessageDialog(null, "Error: El ID de Equipamiento ya existe en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            a.setIdEquipamiento(nuevoIdEquipamiento);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error: Ingresa un valor numérico válido para el ID de Equipamiento.", "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        } catch (RuntimeException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }

        String nombre = jTextField2.getText().trim();
        if (!nombre.matches("^[a-zA-Z0-9\\s]+$")) {
            JOptionPane.showMessageDialog(null, "Error: El nombre solo puede contener letras, números y espacios.", "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        } else {
            a.setNombreEquipamiento(nombre);
        }
        
        a.setTipo((String) jComboBox1.getSelectedItem());
        
         try {
            String query = "INSERT INTO equipamiento(ID_Equipamiento, Nombre, Tipo) VALUES(?, ?, ?)";
            PreparedStatement pps = conSQL.prepareStatement(query);
            pps.setInt(1, a.getIdEquipamiento());
            pps.setString(2, a.getNombreEquipamiento());
            pps.setString(3, a.getTipo());

            pps.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al guardar los datos en la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (!error) {
            JOptionPane.showMessageDialog(null, "Datos guardados correctamente.");
        }
        
        TablaEliminar();
            TablaMostrar();
            TablaBuscar();
            TablaModificar();
    }//GEN-LAST:event_jButton6MousePressed

    private void jButton7MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MousePressed
        // TODO add your handling code here:
        jTextField1.setText(null);
        jTextField2.setText(null);
    }//GEN-LAST:event_jButton7MousePressed

    private void jButton8MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MousePressed
        // TODO add your handling code here:
         int idBuscada = 0;  // Inicializar la variable idBuscada fuera del try-catch

try {
    idBuscada = Integer.parseInt(jTextField3.getText());  // Obtener el ID de búsqueda del JTextField
} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID válido.", "Error", JOptionPane.ERROR_MESSAGE);
    return;  // Salir del método si el usuario no ingresó un número válido
}
try {
    String query = "SELECT * FROM equipamiento WHERE ID_Equipamiento LIKE ?";
    PreparedStatement pstmt = conSQL.getConectarDB().prepareStatement(query);
    pstmt.setString(1, idBuscada + "%");  // El símbolo '%' permite buscar registros que comiencen con el ID proporcionado
    
    ResultSet result = pstmt.executeQuery();
    
    DefaultTableModel modelo = new DefaultTableModel();
    modelo.addColumn("ID_Equipamiento");
    modelo.addColumn("Nombre");
    modelo.addColumn("Tipo");
    
    
    
    while (result.next()) {
        Object[] fila = new Object[9];
        fila[0] = result.getString("ID");
        fila[1] = result.getString("Nombre");
        fila[2] = result.getString("Tipo");
     
       
        modelo.addRow(fila);
    }
    
    jTable2.setModel(modelo);
    
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Error al buscar registros en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
}   
    
    }//GEN-LAST:event_jButton8MousePressed

    private void jButton9MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MousePressed
        // TODO add your handling code here:
        
        int idBuscada = 0;
    boolean entradaValida = false;

    do {
         try {
            String input = jTextField4.getText().trim();
            for (char c : input.toCharArray()) {
                if (!Character.isDigit(c)) {
                    throw new NumberFormatException();
                }
            }
            if (input.length() < 5) {
                idBuscada = Integer.parseInt(input);
               
                entradaValida = true;
            } else {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese exactamente 4 dígitos numéricos.", "Error", JOptionPane.ERROR_MESSAGE);
            break;
        }
    } while (!entradaValida);

     if (entradaValida) {
        try {
            // Realizar una consulta SQL para obtener los datos del registro en la base de datos
            String query = "SELECT * FROM equipamiento WHERE ID_Equipamiento = ?";
            try (PreparedStatement preparedStatement = conSQL.prepareStatement(query)) {
                preparedStatement.setInt(1, idBuscada);
                try (ResultSet result = preparedStatement.executeQuery()) {

                    DefaultTableModel model = (DefaultTableModel) jTable3.getModel();

                    // Limpiar la tabla antes de agregar nuevos datos
                    LimpiarTabla(model);

                    if (result.next()) {
                        // Obtener los datos del resultado
                        int id = result.getInt("ID_Equipamiento");
                        String nombre = result.getString("Nombre");
                        String tipo = result.getString("Tipo");
                        

                        // Agregar los datos al DefaultTableModel asociado al JTable
                        model.addRow(new Object[]{id, nombre, tipo});

                        // Preguntar al usuario si desea eliminar el registro
                        int opcion = JOptionPane.showConfirmDialog(null, "¿Desea eliminar el registro?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

                        if (opcion == JOptionPane.YES_OPTION) {
                            // Eliminar el registro de la base de datos
                            eliminarRegistro(id);

                            // No es necesario limpiar y mostrar la tabla aquí ya que se hace después
                        } else {
                            JOptionPane.showMessageDialog(null, "Eliminación cancelada.");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "No se encontró un registro con el ID especificado.");
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al realizar la consulta en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            // Limpiar y mostrar la tabla después de la eliminación
            DefaultTableModel modeloTabla = (DefaultTableModel) jTable3.getModel();
            LimpiarTabla(modeloTabla);
            TablaEliminar();
            TablaMostrar();
            TablaBuscar();
            TablaModificar();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese exactamente 4 dígitos numéricos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }  
    }//GEN-LAST:event_jButton9MousePressed

    private void jButton10MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MousePressed
        // TODO add your handling code here:
         int idBuscada = 0;
    boolean entradaValida = false;

    do {
         try {
            String input = jTextField5.getText().trim();
            for (char c : input.toCharArray()) {
                if (!Character.isDigit(c)) {
                    throw new NumberFormatException();
                }
            }
            if (input.length() < 5) {
                a.setIdBuscadaEquipamiento(Integer.parseInt(input));
               
                entradaValida = true;
            } else {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese exactamente 4 dígitos numéricos.", "Error", JOptionPane.ERROR_MESSAGE);
            break;
        }
    } while (!entradaValida);

    if (entradaValida) {
        
        try {
            // Realizar una consulta SQL para obtener los datos del registro en la base de datos
            String query = "SELECT * FROM equipamiento WHERE ID_Equipamiento = ?";
            PreparedStatement preparedStatement = conSQL.prepareStatement(query);
            preparedStatement.setInt(1, a.getIdBuscadaEquipamiento());
            ResultSet result = preparedStatement.executeQuery();
            DefaultTableModel model = (DefaultTableModel) jTable4.getModel();

                    // Limpiar la tabla antes de agregar nuevos datos
                    LimpiarTabla(model);
            if (result.next()) {
    
                  // El registro con el ID especificado se encontró en la base de datos
                
                // Obtener los datos del resultado
                int id = result.getInt("ID_Equipamiento");
                String nombre = result.getString("Nombre");
                String tipo = result.getString("Tipo");
               
             

                // Agregar los datos al DefaultTableModel asociado al JTable
               
                model.addRow(new Object[]{id, nombre, tipo});
                
            jTextField6.setText(nombre);
          
            jComboBox2.setSelectedItem(tipo);
            

            } else {
                JOptionPane.showMessageDialog(null, "No se encontró un registro con el ID especificado.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al realizar la consulta en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }     
    }//GEN-LAST:event_jButton10MousePressed

    private void jButton11MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MousePressed
        // TODO add your handling code here:
        
        boolean error = false;
        
         String nombre = jTextField6.getText().trim();
        if (!nombre.matches("^[a-zA-Z0-9\\s]+$")) {
            JOptionPane.showMessageDialog(null, "Error: El nombre solo puede contener letras.", "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        } else {
            a.setNuevoNombreEquipamiento(nombre);
        }

       
        a.setNuevoTipo((String) jComboBox2.getSelectedItem());;
        
       try {
    String query = "UPDATE equipamiento SET Nombre=?, Tipo=? WHERE ID_Equipamiento=?";
    try (PreparedStatement pps = conSQL.prepareStatement(query)) {
        pps.setString(1, a.getNuevoNombreEquipamiento());
        pps.setString(2, a.getNuevoTipo());
        pps.setInt(3, a.getIdBuscadaEquipamiento());
  
        int rowsUpdated = pps.executeUpdate();
        if (rowsUpdated > 0) {
            // Suponiendo que 'm' es una instancia de la clase que muestra los datos
            JOptionPane.showMessageDialog(null, "Datos modificados correctamente.");
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró ningún registro con el ID: " + a.getIdBuscada());
        }
    }
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Error al modificar los datos en la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
} finally {
    // Cerrar la conexión aquí si es necesario
}

DefaultTableModel modeloTabla = (DefaultTableModel) jTable4.getModel();
LimpiarTabla(modeloTabla);
TablaModificar();
        
TablaMostrar();
TablaBuscar();
TablaModificar();

    }//GEN-LAST:event_jButton11MousePressed

    private void jButton3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MousePressed
        // TODO add your handling code here:
        Partida partidaframe = new Partida();
        partidaframe.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton3MousePressed

    private void eliminarRegistro(int id) {
    try {
        // Realizar una consulta SQL para eliminar el registro con el ID especificado
        String deleteQuery = "DELETE FROM equipamiento WHERE ID_Equipamiento = ?";
        PreparedStatement deleteStatement = conSQL.prepareStatement(deleteQuery);
        deleteStatement.setInt(1, id);

        int rowsAffected = deleteStatement.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Registro eliminado con éxito.");
           TablaEliminar();
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró un registro con el ID especificado.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al eliminar el registro en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    } 
    
    private void LimpiarTabla(DefaultTableModel model) {
    int rowCount = model.getRowCount();
    for (int i = rowCount - 1; i >= 0; i--) {
        model.removeRow(i);
    }
}
    
    void TablaMostrar() {
      
   DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
      
   String query = "SELECT * FROM equipamiento"; // Reemplaza esto con tu consulta SQL real

    // Llamada al método para mostrar datos en jTable2
    mostrarDatosEnTabla(jTable1, model, query);
}
    
    
    void TablaBuscar() {
      
   DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
      
   String query = "SELECT * FROM equipamiento"; // Reemplaza esto con tu consulta SQL real

    // Llamada al método para mostrar datos en jTable2
    mostrarDatosEnTabla(jTable2, model, query);
}
    
    void TablaEliminar() {
      
   DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
      
   String query = "SELECT * FROM equipamiento"; // Reemplaza esto con tu consulta SQL real

    // Llamada al método para mostrar datos en jTable2
    mostrarDatosEnTabla(jTable3, model, query);
}
    
     void TablaModificar() {
      
   DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
      
   String query = "SELECT * FROM equipamiento"; // Reemplaza esto con tu consulta SQL real

    // Llamada al método para mostrar datos en jTable2
    mostrarDatosEnTabla(jTable4, model, query);
}
    
     private void configurarSeleccionDeFilaEliminar() {
    jTable3.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent event) {
            if (!event.getValueIsAdjusting()) {
                int selectedRow = jTable3.getSelectedRow();
                if (selectedRow != -1) {
                    Object idValue = jTable3.getValueAt(selectedRow, 0); // Suponiendo que el ID está en la primera columna
                    jTextField4.setText(String.valueOf(idValue));
                }
            }
        }
    });
}
    
    private void configurarSeleccionDeFilaModificar() {
    jTable4.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent event) {
            if (!event.getValueIsAdjusting()) {
                int selectedRow = jTable4.getSelectedRow();
                if (selectedRow != -1) {
                    Object idValue = jTable4.getValueAt(selectedRow, 0); // Suponiendo que el ID está en la primera columna
                    jTextField5.setText(String.valueOf(idValue));
                }
            }
        }
    });
}
     
     private void mostrarDatosEnTabla(JTable tabla, DefaultTableModel modelo, String consultaSQL) {
    LimpiarTabla(modelo);

    try (Connection conSQL = new ConexionDB().getConectarDB();
         Statement stmt = conSQL.createStatement();
         ResultSet result = stmt.executeQuery(consultaSQL)) {

        while (result.next()) {
            int id = result.getInt("ID_Equipamiento");
            String nombre = result.getString("Nombre"); 
            String descripcion = result.getString("Tipo");
           

            modelo.addRow(new Object[]{id, nombre, descripcion});
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al leer los datos desde la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Equipamiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Equipamiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Equipamiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Equipamiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Equipamiento().setVisible(true);
            }
        });
    }

    private boolean idEquipamientoExiste(int idEquipamiento) {
    try {
        String query = "SELECT * FROM equipamiento WHERE ID_Equipamiento = ?";
        PreparedStatement pps = conSQL.prepareStatement(query);
        pps.setInt(1, idEquipamiento);

        ResultSet rs = pps.executeQuery();

        return rs.next();  // Devuelve true si hay un resultado, lo que significa que el ID de usuario ya existe
    } catch (SQLException e) {
        e.printStackTrace();
        return false;  // Manejar la excepción de alguna manera adecuada para tu aplicación
    }
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables
private final Atributos a;
}
