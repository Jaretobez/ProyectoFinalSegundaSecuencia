/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.sql.Connection;
import java.sql.PreparedStatement; // Añade la importación necesaria
import java.sql.SQLException; // Añade la importación necesaria
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;


/**
 *
 * @author aeaya
 */
public class Usuarios extends javax.swing.JFrame {
ConexionDB conSQL = new ConexionDB();

    /**
     * Creates new form Usuarios
     */

  
    
    public Usuarios() {
        initComponents();
        a = new Atributos();
        
         MostrarDatos();
         TablaBuscar();
         TablaModificar();
         TablaEliminar();
         
         configurarSeleccionDeFilaEliminar();
         configurarSeleccionDeFilaModificar();
         
          DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
         leftRenderer.setHorizontalAlignment(SwingConstants.LEFT); // Alineación a la izquierda
         jTable1.getColumnModel().getColumn(0).setCellRenderer(leftRenderer); 
         jTable1.getColumnModel().getColumn(1).setCellRenderer(leftRenderer); 
         jTable1.getColumnModel().getColumn(2).setCellRenderer(leftRenderer); 
         jTable1.getColumnModel().getColumn(3).setCellRenderer(leftRenderer); 
         jTable1.getColumnModel().getColumn(4).setCellRenderer(leftRenderer);
         
         
         leftRenderer.setHorizontalAlignment(SwingConstants.LEFT); // Alineación a la izquierda
         jTable2.getColumnModel().getColumn(0).setCellRenderer(leftRenderer); 
         jTable2.getColumnModel().getColumn(1).setCellRenderer(leftRenderer); 
         jTable2.getColumnModel().getColumn(2).setCellRenderer(leftRenderer); 
         jTable2.getColumnModel().getColumn(3).setCellRenderer(leftRenderer); 
         jTable2.getColumnModel().getColumn(4).setCellRenderer(leftRenderer);
         
         jTable3.getColumnModel().getColumn(0).setCellRenderer(leftRenderer); 
         jTable3.getColumnModel().getColumn(1).setCellRenderer(leftRenderer); 
         jTable3.getColumnModel().getColumn(2).setCellRenderer(leftRenderer); 
         jTable3.getColumnModel().getColumn(3).setCellRenderer(leftRenderer); 
         jTable3.getColumnModel().getColumn(4).setCellRenderer(leftRenderer);
         
         jTable4.getColumnModel().getColumn(0).setCellRenderer(leftRenderer); 
         jTable4.getColumnModel().getColumn(1).setCellRenderer(leftRenderer); 
         jTable4.getColumnModel().getColumn(2).setCellRenderer(leftRenderer); 
         jTable4.getColumnModel().getColumn(3).setCellRenderer(leftRenderer); 
         jTable4.getColumnModel().getColumn(4).setCellRenderer(leftRenderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton8 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jButton12 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jButton13 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jButton14 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jTextField10 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(51, 102, 0));
        jPanel1.setLayout(null);

        jButton2.setText("Usuarios");
        jPanel1.add(jButton2);
        jButton2.setBounds(20, 170, 120, 40);

        jButton3.setText("Equipos");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton3MousePressed(evt);
            }
        });
        jPanel1.add(jButton3);
        jButton3.setBounds(20, 240, 120, 40);

        jButton4.setText("Partida");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton4MousePressed(evt);
            }
        });
        jPanel1.add(jButton4);
        jButton4.setBounds(20, 310, 120, 40);

        jButton5.setText("Equipamiento");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton5MousePressed(evt);
            }
        });
        jPanel1.add(jButton5);
        jButton5.setBounds(20, 380, 120, 40);

        jButton7.setText("SALIR");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton7MousePressed(evt);
            }
        });
        jPanel1.add(jButton7);
        jButton7.setBounds(20, 570, 120, 40);

        jTabbedPane2.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(51, 153, 0));
        jPanel2.setLayout(null);

        jLabel1.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("NOMBRE");
        jPanel2.add(jLabel1);
        jLabel1.setBounds(30, 170, 190, 50);
        jPanel2.add(jTextField1);
        jTextField1.setBounds(220, 110, 140, 50);

        jLabel2.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("APELLIDO");
        jPanel2.add(jLabel2);
        jLabel2.setBounds(30, 250, 190, 50);
        jPanel2.add(jTextField2);
        jTextField2.setBounds(220, 180, 140, 50);

        jLabel3.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("CORREO ELECTRONICO");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(380, 110, 190, 50);
        jPanel2.add(jTextField3);
        jTextField3.setBounds(220, 250, 140, 50);

        jLabel4.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("EDAD");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(490, 180, 120, 50);
        jPanel2.add(jSpinner1);
        jSpinner1.setBounds(570, 180, 150, 50);

        jButton1.setText("Guardar");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });
        jPanel2.add(jButton1);
        jButton1.setBounds(110, 380, 150, 50);

        jLabel7.setFont(new java.awt.Font("SimSun-ExtB", 1, 36)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("NUEVOS RECLUTAS");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(20, 20, 440, 70);

        jLabel5.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("ID");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(30, 110, 170, 40);
        jPanel2.add(jTextField4);
        jTextField4.setBounds(570, 100, 140, 50);

        jButton9.setText("Limpiar");
        jButton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton9MousePressed(evt);
            }
        });
        jPanel2.add(jButton9);
        jButton9.setBounds(510, 370, 160, 50);

        jButton6.setText("AÑADIR JUGADORES A UN EQUIPO");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton6MousePressed(evt);
            }
        });
        jPanel2.add(jButton6);
        jButton6.setBounds(210, 470, 340, 50);

        jTabbedPane2.addTab("Nuevo Usuario", jPanel2);

        jPanel3.setBackground(new java.awt.Color(51, 153, 0));
        jPanel3.setLayout(null);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "APELLIDO", "CORREO", "EDAD"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jPanel3.add(jScrollPane2);
        jScrollPane2.setBounds(50, 190, 740, 350);

        jLabel6.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Dame un ID:");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(80, 100, 110, 40);
        jPanel3.add(jTextField5);
        jTextField5.setBounds(220, 100, 210, 50);

        jButton10.setText("Limpiar");
        jButton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton10MousePressed(evt);
            }
        });
        jPanel3.add(jButton10);
        jButton10.setBounds(620, 100, 120, 40);

        jButton11.setText("Buscar");
        jButton11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton11MousePressed(evt);
            }
        });
        jPanel3.add(jButton11);
        jButton11.setBounds(450, 100, 110, 40);

        jTabbedPane2.addTab("Buscar", jPanel3);

        jPanel4.setLayout(null);

        jPanel7.setBackground(new java.awt.Color(51, 153, 0));
        jPanel7.setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "APELLIDO", "CORREO", "EDAD"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setToolTipText("");
        jScrollPane1.setViewportView(jTable1);

        jPanel7.add(jScrollPane1);
        jScrollPane1.setBounds(70, 70, 730, 480);

        jButton8.setText("Actualizar");
        jButton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton8MousePressed(evt);
            }
        });
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel7.add(jButton8);
        jButton8.setBounds(280, 30, 170, 23);

        jPanel4.add(jPanel7);
        jPanel7.setBounds(-10, -5, 840, 580);

        jTabbedPane2.addTab("Mostrar", jPanel4);

        jPanel5.setBackground(new java.awt.Color(51, 153, 0));
        jPanel5.setLayout(null);
        jPanel5.add(jTextField6);
        jTextField6.setBounds(670, 120, 140, 40);
        jPanel5.add(jTextField7);
        jTextField7.setBounds(670, 190, 140, 40);
        jPanel5.add(jTextField8);
        jTextField8.setBounds(670, 270, 140, 40);
        jPanel5.add(jTextField9);
        jTextField9.setBounds(160, 60, 180, 50);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "APELLIDO", "CORREO", "EDAD"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        jPanel5.add(jScrollPane3);
        jScrollPane3.setBounds(20, 160, 510, 320);

        jButton12.setText("BUSCAR");
        jButton12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton12MousePressed(evt);
            }
        });
        jPanel5.add(jButton12);
        jButton12.setBounds(360, 70, 90, 40);

        jLabel8.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("DAME UN ID");
        jPanel5.add(jLabel8);
        jLabel8.setBounds(40, 60, 140, 50);

        jButton13.setText("Modificar");
        jButton13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton13MousePressed(evt);
            }
        });
        jPanel5.add(jButton13);
        jButton13.setBounds(601, 453, 150, 40);

        jLabel9.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("NOMBRE");
        jPanel5.add(jLabel9);
        jLabel9.setBounds(560, 120, 100, 40);

        jLabel10.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("APELLIDO");
        jPanel5.add(jLabel10);
        jLabel10.setBounds(560, 190, 100, 40);

        jLabel11.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("CORREO");
        jPanel5.add(jLabel11);
        jLabel11.setBounds(560, 270, 100, 40);

        jLabel12.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("EDAD");
        jPanel5.add(jLabel12);
        jLabel12.setBounds(560, 350, 100, 40);
        jPanel5.add(jSpinner2);
        jSpinner2.setBounds(670, 350, 140, 40);

        jButton14.setText("LIMPIAR");
        jButton14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton14MousePressed(evt);
            }
        });
        jPanel5.add(jButton14);
        jButton14.setBounds(660, 20, 140, 40);

        jTabbedPane2.addTab("Modificar", jPanel5);

        jPanel6.setBackground(new java.awt.Color(51, 153, 0));
        jPanel6.setLayout(null);
        jPanel6.add(jTextField10);
        jTextField10.setBounds(180, 40, 150, 40);

        jLabel14.setFont(new java.awt.Font("SimSun", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Dame un ID:");
        jPanel6.add(jLabel14);
        jLabel14.setBounds(40, 40, 130, 40);

        jButton15.setText("Buscar");
        jButton15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton15MousePressed(evt);
            }
        });
        jPanel6.add(jButton15);
        jButton15.setBounds(352, 43, 90, 30);

        jButton16.setText("LIMPIAR");
        jButton16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton16MousePressed(evt);
            }
        });
        jPanel6.add(jButton16);
        jButton16.setBounds(520, 50, 75, 23);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOMBRE", "APELLIDO", "CORREO", "EDAD"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable4);

        jPanel6.add(jScrollPane4);
        jScrollPane4.setBounds(40, 100, 650, 440);

        jTabbedPane2.addTab("Eliminar", jPanel6);

        jPanel1.add(jTabbedPane2);
        jTabbedPane2.setBounds(170, 30, 830, 630);

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Logo_AirsoftPro_150.png"))); // NOI18N
        jPanel1.add(jLabel13);
        jLabel13.setBounds(10, 0, 170, 160);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1010, 670);

        setSize(new java.awt.Dimension(1020, 673));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        // TODO add your handling code here:

        boolean error = false;

        try {
            int nuevoIdUsuario = Integer.parseInt(jTextField1.getText().trim());

            // Verificar si el ID de usuario ya existe
            if (idUsuarioExiste(nuevoIdUsuario)) {
                JOptionPane.showMessageDialog(null, "Error: El ID de usuario ya existe en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            a.setIdUsuario(nuevoIdUsuario);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error: Ingresa un valor numérico válido para el ID de usuario.", "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        } catch (RuntimeException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }

        String nombre = jTextField2.getText().trim();
        if (!nombre.matches("^[a-zA-Z]+$")) {
            JOptionPane.showMessageDialog(null, "Error: El nombre solo puede contener letras.", "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        } else {
            a.setNombreU(nombre);
        }

        // Validar apellido
        String apellido = jTextField3.getText().trim();
        if (!apellido.matches("^[a-zA-Z]+$")) {
            JOptionPane.showMessageDialog(null, "Error: El apellido solo puede contener letras.", "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        } else {
            a.setApellidoU(apellido);
        }

        String correo = jTextField4.getText();
        if (!correo.isEmpty()) {
            if (!correo.matches("^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$")) {
                JOptionPane.showMessageDialog(null, "Error: Correo electrónico no válido.");
                error = true;
            }
            a.setCorreo(correo);
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese un correo electrónico válido.", "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }

        try {
    int edad = ((Number) jSpinner1.getValue()).intValue();
    a.setEdad(edad);
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "Error: Ingresa números válidos en los campos de EDAD.");
    System.out.println("Error al convertir edad a número: " + e.getMessage());
    error = true;
}

        try {
            String query = "INSERT INTO usuario(ID_Usuario, Nombre, Apellido, Correo, Edad) VALUES(?, ?, ?, ?, ?)";
            PreparedStatement pps = conSQL.prepareStatement(query);
            pps.setInt(1, a.getIdUsuario());
            pps.setString(2, a.getNombreU());
            pps.setString(3, a.getApellidoU());
            pps.setString(4, a.getCorreo());
            pps.setInt(5, a.getEdad());

            pps.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al guardar los datos en la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (!error) {
            JOptionPane.showMessageDialog(null, "Datos guardados correctamente.");
        }
        
        TablaEliminar();
MostrarDatos();
TablaBuscar();
TablaModificar();
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton8MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton8MousePressed
      SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
            try {
                // Obtener el modelo de la tabla
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                // Limpiar la tabla antes de agregar nuevos datos
                LimpiarTabla(model);

                // Realizar la consulta y obtener los nuevos datos
                String query = "SELECT * FROM usuario"; // Reemplaza esto con tu consulta SQL real
                try (Connection conSQL = new ConexionDB().getConectarDB();
                     Statement stmt = conSQL.createStatement();
                     ResultSet result = stmt.executeQuery(query)) {

                    // Actualizar la tabla con los nuevos datos
                    while (result.next()) {
                        int id = result.getInt("ID_Usuario");
                        String nombre = result.getString("Nombre");
                        String apellido = result.getString("Apellido");
                        String correo = result.getString("Correo");
                        int edad = result.getInt("Edad");

                        model.addRow(new Object[]{id, nombre, apellido, correo, edad});
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al actualizar la tabla.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
    }//GEN-LAST:event_jButton8MousePressed

    private void jButton7MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MousePressed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton7MousePressed

    private void jButton9MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton9MousePressed
        // TODO add your handling code here:
        jTextField1.setText(null);
        jTextField2.setText(null);     
        jTextField3.setText(null);
        jTextField4.setText(null);
        jSpinner1.setValue(0);
        jSpinner1.repaint();
    }//GEN-LAST:event_jButton9MousePressed

    private void jButton10MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton10MousePressed
        // TODO add your handling code here:
          jTextField5.setText(null);
          
          SwingUtilities.invokeLater(new Runnable() {
        @Override
        public void run() {
            try {
                // Obtener el modelo de la tabla
                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();

                // Limpiar la tabla antes de agregar nuevos datos
                LimpiarTabla(model);

                // Realizar la consulta y obtener los nuevos datos
                String query = "SELECT * FROM usuario"; // Reemplaza esto con tu consulta SQL real
                try (Connection conSQL = new ConexionDB().getConectarDB();
                     Statement stmt = conSQL.createStatement();
                     ResultSet result = stmt.executeQuery(query)) {

                    // Actualizar la tabla con los nuevos datos
                    while (result.next()) {
                        int id = result.getInt("ID_Usuario");
                        String nombre = result.getString("Nombre");
                        String apellido = result.getString("Apellido");
                        String correo = result.getString("Correo");
                        int edad = result.getInt("Edad");

                        model.addRow(new Object[]{id, nombre, apellido, correo, edad});
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error al actualizar la tabla.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    });
    }//GEN-LAST:event_jButton10MousePressed

    private void jButton11MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton11MousePressed
        // TODO add your handling code here:
        int idBuscada = 0;  // Inicializar la variable idBuscada fuera del try-catch

try {
    idBuscada = Integer.parseInt(jTextField5.getText());  // Obtener el ID de búsqueda del JTextField
} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID válido.", "Error", JOptionPane.ERROR_MESSAGE);
    return;  // Salir del método si el usuario no ingresó un número válido
}
try {
    String query = "SELECT * FROM usuario WHERE ID_Usuario LIKE ?";
    PreparedStatement pstmt = conSQL.getConectarDB().prepareStatement(query);
    pstmt.setString(1, idBuscada + "%");  // El símbolo '%' permite buscar registros que comiencen con el ID proporcionado
    
    ResultSet result = pstmt.executeQuery();
    
    DefaultTableModel modelo = new DefaultTableModel();
    modelo.addColumn("ID");
    modelo.addColumn("Nombre");
    modelo.addColumn("Apellido");
    modelo.addColumn("Correo");
    modelo.addColumn("Edad");
    
    
    while (result.next()) {
        Object[] fila = new Object[9];
        fila[0] = result.getString("ID_Usuario");
        fila[1] = result.getString("Nombre");
        fila[2] = result.getString("Apellido");
        fila[3] = result.getString("Correo");     
        fila[4] = result.getInt("Edad");
       
        modelo.addRow(fila);
    }
    
    jTable2.setModel(modelo);
    
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Error al buscar registros en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
}
    }//GEN-LAST:event_jButton11MousePressed

    private void jButton15MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton15MousePressed
        // TODO add your handling code here:

   int idBuscada = 0;
    boolean entradaValida = false;

    do {
         try {
            String input = jTextField10.getText().trim();
            for (char c : input.toCharArray()) {
                if (!Character.isDigit(c)) {
                    throw new NumberFormatException();
                }
            }
            if (input.length() < 5) {
                idBuscada = Integer.parseInt(input);
               
                entradaValida = true;
            } else {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese exactamente 4 dígitos numéricos.", "Error", JOptionPane.ERROR_MESSAGE);
            break;
        }
    } while (!entradaValida);

     if (entradaValida) {
        try {
            // Realizar una consulta SQL para obtener los datos del registro en la base de datos
            String query = "SELECT * FROM usuario WHERE ID_Usuario = ?";
            try (PreparedStatement preparedStatement = conSQL.prepareStatement(query)) {
                preparedStatement.setInt(1, idBuscada);
                try (ResultSet result = preparedStatement.executeQuery()) {

                    DefaultTableModel model = (DefaultTableModel) jTable4.getModel();

                    // Limpiar la tabla antes de agregar nuevos datos
                    LimpiarTabla(model);

                    if (result.next()) {
                        // Obtener los datos del resultado
                        int id = result.getInt("ID_Usuario");
                        String nombre = result.getString("Nombre");
                        String apellido = result.getString("Apellido");
                        String correo = result.getString("Correo");
                        int edad = result.getInt("Edad");

                        // Agregar los datos al DefaultTableModel asociado al JTable
                        model.addRow(new Object[]{id, nombre, apellido, correo, edad});

                        // Preguntar al usuario si desea eliminar el registro
                        int opcion = JOptionPane.showConfirmDialog(null, "¿Desea eliminar el registro?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

                        if (opcion == JOptionPane.YES_OPTION) {
                            // Eliminar el registro de la base de datos
                            eliminarRegistro(id);

                            // No es necesario limpiar y mostrar la tabla aquí ya que se hace después
                        } else {
                            JOptionPane.showMessageDialog(null, "Eliminación cancelada.");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "No se encontró un registro con el ID especificado.");
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al realizar la consulta en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
            }

            // Limpiar y mostrar la tabla después de la eliminación
            DefaultTableModel modeloTabla = (DefaultTableModel) jTable4.getModel();
            LimpiarTabla(modeloTabla);
            TablaEliminar();
MostrarDatos();
TablaBuscar();
TablaModificar();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese exactamente 4 dígitos numéricos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }  
    }//GEN-LAST:event_jButton15MousePressed

    private void jButton12MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton12MousePressed
        int idBuscada = 0;
    boolean entradaValida = false;

    do {
         try {
            String input = jTextField9.getText().trim();
            for (char c : input.toCharArray()) {
                if (!Character.isDigit(c)) {
                    throw new NumberFormatException();
                }
            }
            if (input.length() < 5) {
                a.setIdBuscada(Integer.parseInt(input));
               
                entradaValida = true;
            } else {
                throw new NumberFormatException();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese exactamente 4 dígitos numéricos.", "Error", JOptionPane.ERROR_MESSAGE);
            break;
        }
    } while (!entradaValida);

    if (entradaValida) {
        
        try {
            // Realizar una consulta SQL para obtener los datos del registro en la base de datos
            String query = "SELECT * FROM usuario WHERE ID_Usuario = ?";
            PreparedStatement preparedStatement = conSQL.prepareStatement(query);
            preparedStatement.setInt(1, a.getIdBuscada());
            ResultSet result = preparedStatement.executeQuery();
            DefaultTableModel model = (DefaultTableModel) jTable3.getModel();

                    // Limpiar la tabla antes de agregar nuevos datos
                    LimpiarTabla(model);
            if (result.next()) {
    
                  // El registro con el ID especificado se encontró en la base de datos
                
                // Obtener los datos del resultado
                int id = result.getInt("ID_Usuario");
                String nombre = result.getString("Nombre");
                String apellido = result.getString("Apellido");
                String correo = result.getString("Correo");      
                int edad = result.getInt("Edad");
             

                // Agregar los datos al DefaultTableModel asociado al JTable
               
                model.addRow(new Object[]{id, nombre, apellido, correo,  edad});
                
            jTextField6.setText(nombre);
            jTextField7.setText(apellido);
            jTextField8.setText(correo);
            jSpinner2.setValue(edad);

            } else {
                JOptionPane.showMessageDialog(null, "No se encontró un registro con el ID especificado.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al realizar la consulta en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }     
    
    }//GEN-LAST:event_jButton12MousePressed

    private void jButton14MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton14MousePressed
        // TODO add your handling code here:
        jTextField6.setText(null);
            jTextField7.setText(null);
            jTextField8.setText(null);
            jTextField9.setText(null);
            jSpinner2.setValue(0);
        jSpinner2.repaint();
        DefaultTableModel modeloTabla = (DefaultTableModel) jTable3.getModel();
        LimpiarTabla(modeloTabla);
            TablaModificar();
    }//GEN-LAST:event_jButton14MousePressed

    private void jButton13MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton13MousePressed
        // TODO add your handling code here:
        boolean error = false;
        
         String nombre = jTextField6.getText().trim();
        if (!nombre.matches("^[a-zA-Z]+$")) {
            JOptionPane.showMessageDialog(null, "Error: El nombre solo puede contener letras.", "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        } else {
            a.setNuevoNombreU(nombre);
        }

        // Validar apellido
        String apellido = jTextField7.getText().trim();
        if (!apellido.matches("^[a-zA-Z]+$")) {
            JOptionPane.showMessageDialog(null, "Error: El apellido solo puede contener letras.", "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        } else {
            a.setNuevoApellidoU(apellido);
        }

        String correo = jTextField8.getText();
        if (!correo.isEmpty()) {
            if (!correo.matches("^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$")) {
                JOptionPane.showMessageDialog(null, "Error: Correo electrónico no válido.");
                error = true;
            }
            a.setNuevoCorreo(correo);
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese un correo electrónico válido.", "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }

        try {
    int edad = ((Number) jSpinner2.getValue()).intValue();
    a.setNuevaEdad(edad);
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(null, "Error: Ingresa números válidos en los campos de EDAD.");
    System.out.println("Error al convertir edad a número: " + e.getMessage());
    error = true;
}
        
        
       try {
    String query = "UPDATE usuario SET Nombre=?, Apellido=?, Correo=?, Edad=? WHERE ID_Usuario=?";
    try (PreparedStatement pps = conSQL.prepareStatement(query)) {
        pps.setString(1, a.getNuevoNombreU());
        pps.setString(2, a.getNuevoApellidoU());
        pps.setString(3, a.getNuevoCorreo());
        pps.setInt(4, a.getNuevaEdad());
        pps.setInt(5, a.getIdBuscada());

        int rowsUpdated = pps.executeUpdate();
        if (rowsUpdated > 0) {
            // Suponiendo que 'm' es una instancia de la clase que muestra los datos
            JOptionPane.showMessageDialog(null, "Datos modificados correctamente.");
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró ningún registro con el ID: " + a.getIdBuscada());
        }
    }
} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Error al modificar los datos en la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
} finally {
    // Cerrar la conexión aquí si es necesario
}

DefaultTableModel modeloTabla = (DefaultTableModel) jTable3.getModel();
LimpiarTabla(modeloTabla);
TablaModificar();
        
MostrarDatos();
TablaBuscar();
TablaModificar();

    }//GEN-LAST:event_jButton13MousePressed

    private void jButton16MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton16MousePressed
        // TODO add your handling code here:
        jTextField10.setText(null);
    }//GEN-LAST:event_jButton16MousePressed

    private void jButton3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MousePressed
        // TODO add your handling code here:
       Equipos equipoframe  =new Equipos();
        equipoframe.setVisible(true);
            this.dispose();
    }//GEN-LAST:event_jButton3MousePressed

    private void jButton5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MousePressed
        // TODO add your handling code here:
        Equipamiento equiframe = new Equipamiento();
        equiframe.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton5MousePressed

    private void jButton4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MousePressed
        // TODO add your handling code here:
        Partida partidaframe = new Partida();
        partidaframe.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton4MousePressed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton6MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MousePressed
        // TODO add your handling code here:
        EquipoEn enframe = new EquipoEn();
        enframe.setVisible(true);
    }//GEN-LAST:event_jButton6MousePressed
     
    
    
    private boolean idUsuarioExiste(int idUsuario) {
    try {
        String query = "SELECT * FROM usuario WHERE ID_Usuario = ?";
        PreparedStatement pps = conSQL.prepareStatement(query);
        pps.setInt(1, idUsuario);

        ResultSet rs = pps.executeQuery();

        return rs.next();  // Devuelve true si hay un resultado, lo que significa que el ID de usuario ya existe
    } catch (SQLException e) {
        e.printStackTrace();
        return false;  // Manejar la excepción de alguna manera adecuada para tu aplicación
    }
}
    
   
private void LimpiarTabla(DefaultTableModel model) {
    int rowCount = model.getRowCount();
    for (int i = rowCount - 1; i >= 0; i--) {
        model.removeRow(i);
    }
}
 
    
void MostrarDatos() {
      
   DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
      
   String query = "SELECT * FROM usuario"; // Reemplaza esto con tu consulta SQL real

    // Llamada al método para mostrar datos en jTable2
    mostrarDatosEnTabla(jTable1, model, query);
}

void TablaBuscar() {
     DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
      
   String query = "SELECT * FROM usuario"; // Reemplaza esto con tu consulta SQL real

    // Llamada al método para mostrar datos en jTable2
    mostrarDatosEnTabla(jTable2, model, query);
}

void TablaModificar() {
     DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
      
   String query = "SELECT * FROM usuario"; // Reemplaza esto con tu consulta SQL real

    // Llamada al método para mostrar datos en jTable2
    mostrarDatosEnTabla(jTable3, model, query);
}

void TablaEliminar() {
     DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
      
   String query = "SELECT * FROM usuario"; // Reemplaza esto con tu consulta SQL real

    // Llamada al método para mostrar datos en jTable2
    mostrarDatosEnTabla(jTable4, model, query);
}
   
private void mostrarDatosEnTabla(JTable tabla, DefaultTableModel modelo, String consultaSQL) {
    LimpiarTabla(modelo);

    try (Connection conSQL = new ConexionDB().getConectarDB();
         Statement stmt = conSQL.createStatement();
         ResultSet result = stmt.executeQuery(consultaSQL)) {

        while (result.next()) {
            int id = result.getInt("ID_Usuario");
            String nombre = result.getString("Nombre");
            String apellido = result.getString("Apellido");
            String correo = result.getString("Correo");
            int edad = result.getInt("Edad");

            modelo.addRow(new Object[]{id, nombre, apellido, correo, edad});
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error al leer los datos desde la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    

private void eliminarRegistro(int id) {
    try {
        // Realizar una consulta SQL para eliminar el registro con el ID especificado
        String deleteQuery = "DELETE FROM usuario WHERE ID_Usuario = ?";
        PreparedStatement deleteStatement = conSQL.prepareStatement(deleteQuery);
        deleteStatement.setInt(1, id);

        int rowsAffected = deleteStatement.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Registro eliminado con éxito.");
           TablaEliminar();
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró un registro con el ID especificado.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al eliminar el registro en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    } 

private void configurarSeleccionDeFilaEliminar() {
    jTable4.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent event) {
            if (!event.getValueIsAdjusting()) {
                int selectedRow = jTable4.getSelectedRow();
                if (selectedRow != -1) {
                    Object idValue = jTable4.getValueAt(selectedRow, 0); // Suponiendo que el ID está en la primera columna
                    jTextField10.setText(String.valueOf(idValue));
                }
            }
        }
    });
}

private void configurarSeleccionDeFilaModificar() {
    jTable3.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent event) {
            if (!event.getValueIsAdjusting()) {
                int selectedRow = jTable3.getSelectedRow();
                if (selectedRow != -1) {
                    Object idValue = jTable3.getValueAt(selectedRow, 0); // Suponiendo que el ID está en la primera columna
                    jTextField9.setText(String.valueOf(idValue));
                }
            }
        }
    });
}



// Luego puedes llamar a este método en algún lugar apropiado, por ejemplo, en el constructor de tu clase o en un método de inicialización




    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Usuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Usuarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
private final Atributos a;
}
